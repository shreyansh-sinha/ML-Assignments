# -*- coding: utf-8 -*-
"""Copy of Assignment 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgZS87ihFilkCdZlb9eMVqW_JLdU_bT_
"""

import numpy as np
import pandas as pd
import seaborn as ans
from sklearn.model_selection import train_test_split

column_names = ["erythema", "scaling", "definite borders", "itching",
                "koebner phenomenon", "polygonal papules", "follicular papules", "oral mucosal involvement", 
               "knee and elbow involvement", "scalp involvement", "family history", "melanin incontinence", "eosinophils in the infiltrate", "PNL infiltrate", "fibrosis of the papillary dermis", "exocytosis", 
               "acanthosis", "hyperkeratosis", "parakeratosis", "clubbing of the rete ridges", "elongation of the rete ridges", "thinning of the suprapapillary epidermis", "spongiform pustule", "munro microabcess", 
               "focal hypergranulosis", "disappearance of the granular layer", "vacuolisation and damage of basal layer", "spongiosis", "saw-tooth appearance of retes", "follicular horn plug", "perifollicular parakeratosis", "inflammatory monoluclear inflitrate",
               "band-like infiltrate", "age", "type"]

data = pd.read_csv("dermatology.data", header = None, names = column_names)

data = data[data['age'] != '?']

data = data.astype("int64")

data['age'] = data['age'] - data['age'].min() / data['age'].max() - data['age'].min()

x = data.drop('type', axis = 1)
y = data['type']

x_train,x_test,y_train,y_test=train_test_split(x, y,
test_size=0.33)

from sklearn.linear_model import LogisticRegression
from sklearn import preprocessing

logisticRegression = LogisticRegression()

logisticRegression.fit(x_train, y_train)

y_pred = logisticRegression.predict(x_test)

y_pred

from sklearn.metrics import accuracy_score

# print(accuracy_score(y_train, predictions))

print(accuracy_score(y_test, y_pred))

from sklearn import metrics

cm_test = metrics.confusion_matrix(y_test, y_pred)

print("confusion matrix for LR")
print(cm_test)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier()
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

y_pred

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, y_pred))

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test, y_pred))

from sklearn.svm import SVC
svcClassifier = SVC(kernel = 'linear')
svcClassifier.fit(x_train, y_train)

y3_pred = svcClassifier.predict(x_test)

print(y3_pred)

print(confusion_matrix(y_test, y3_pred))

from sklearn.metrics import accuracy_score

# print(accuracy_score(y_train, predictions))

print(accuracy_score(y_test, y3_pred))

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()
rfc.fit(x_train, y_train)

rfc_pred = rfc.predict(x_test)

print(rfc_pred)

print(confusion_matrix(y_test, rfc_pred))

from sklearn.metrics import accuracy_score

# print(accuracy_score(y_train, predictions))

print(accuracy_score(y_test, rfc_pred))

